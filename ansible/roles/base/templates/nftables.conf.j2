{# This computes the complete list of backbone and access interfaces,
   including those automatically generated as part of the Wireguard
   mesh. #}
{% set computed_ifs = namespace(bb=[], ac=[]) %}
{% if manual_backbone_ifs is defined %}
  {%- set computed_ifs.bb = manual_backbone_ifs %}
{% endif %}
{% if manual_access_ifs is defined %}
  {%- set computed_ifs.ac = manual_access_ifs %}
{% endif %}
{% if inventory_hostname in groups.wg_mesh %}
  {%- for host in groups.wg_mesh %}
    {%- if host != inventory_hostname
          and host not in wg_mesh_exclude|default([])
          and inventory_hostname not in hostvars[host].wg_mesh_exclude|default([])
          and (wg_mesh_endpoint_address is defined
               or hostvars[host].wg_mesh_endpoint_address is defined) %}
      {%- if hostvars[host].router_role == "backbone" %}
        {%- set computed_ifs.bb = computed_ifs.bb + ["int-" + hostvars[host].inventory_hostname_short] %}
      {%- elif hostvars[host].router_role == "access" %}
        {%- set computed_ifs.ac = computed_ifs.ac + ["int-" + hostvars[host].inventory_hostname_short] %}
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{% endif -%}

#!/usr/sbin/nft -f

flush ruleset

define DN42_NETS_V4 = { 172.20.0.0/14, 172.31.0.0/16, 10.0.0.0/8 }
define DN42_NETS_V6 = fd00::/8
define INTERNAL_NETS_V4 = { {{ internal_net_v4 }}, {{ private_net_v4 }} }
define INTERNAL_NETS_V6 = {{ internal_net_v6 }}

# This table handles packets going through the IP stack: both those
# whose origin or destination is this host, or which are being forwarded
# at L3 through it.
table inet firewall {
    set PUBLIC_IFS {
        type ifname;
{% if public_ifs is defined %}
        elements = {
{% for if in public_ifs %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    set BACKBONE_ACCESS_IFS {
        type ifname;
{% if computed_ifs.bb != [] or computed_ifs.ac != [] %}
        elements = {
{% for if in computed_ifs.bb %}
            "{{ if }}",
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    set BACKBONE_DN42_IFS {
        type ifname;
{% if computed_ifs.bb != [] or dn42_ifs is defined %}
        elements = {
{% for if in computed_ifs.bb %}
            "{{ if }}",
{% endfor %}
{% for if in dn42_ifs|default([]) %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    set USER_IFS {
        type ifname;
{% if user_ifs is defined %}
        elements = {
{% for if in user_ifs %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    set HOME_IFS {
        type ifname;
{% if home_ifs is defined %}
        elements = {
{% for if in home_ifs %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    set USER_HOME_IFS {
        type ifname;
{% if user_ifs is defined or home_ifs is defined %}
        elements = {
{% for if in user_ifs|default([]) %}
            "{{ if }}",
{% endfor %}
{% for if in home_ifs|default([]) %}
            "{{ if }}",
{% endfor %}
        }
{% endif %}
    }

    chain input {
        type filter hook input priority -1; policy drop;

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp icmp type echo-request jump pings
        meta l4proto ipv6-icmp icmpv6 type echo-request jump pings
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow SSH connections on any interface.
        tcp dport ssh accept

        # Allow access to the prometheus node exporter from internal
        # addresses.
        tcp dport 9100 ip saddr $INTERNAL_NETS_V4 accept
        tcp dport 9100 ip6 saddr $INTERNAL_NETS_V6 accept

        include "/etc/nftables/in.d/*.nft"
    }

    chain forward {
        type filter hook forward priority -1; policy drop;
        iifname @PUBLIC_IFS goto fwd-from-public
        iifname @BACKBONE_ACCESS_IFS ip saddr $INTERNAL_NETS_V4 goto fwd-from-internal
        iifname @BACKBONE_ACCESS_IFS ip6 saddr $INTERNAL_NETS_V6 goto fwd-from-internal
        iifname @BACKBONE_DN42_IFS ip saddr $DN42_NETS_V4 goto fwd-from-dn42
        iifname @BACKBONE_DN42_IFS ip6 saddr $DN42_NETS_V6 goto fwd-from-dn42
        iifname @USER_HOME_IFS ip saddr $INTERNAL_NETS_V4 goto fwd-from-users
        iifname @USER_HOME_IFS ip6 saddr $INTERNAL_NETS_V6 goto fwd-from-users
        iifname @HOME_IFS goto fwd-from-public
    }

    chain fwd-from-public {
{% for dnat in public_port_forwards|default([]) %}
        ip daddr {{ dnat.dest_v4 }} {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } accept
        ip6 daddr {{ dnat.dest_v6 }} {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } accept
{% endfor %}
        oifname @BACKBONE_ACCESS_IFS ip daddr $INTERNAL_NETS_V4 ct state { established, related } accept comment "public -> internal"
        oifname @BACKBONE_ACCESS_IFS ip6 daddr $INTERNAL_NETS_V6 ct state { established, related } accept comment "public -> internal"
        oifname @USER_HOME_IFS ip daddr $INTERNAL_NETS_V4 ct state { established, related } accept comment "public -> users"
        oifname @USER_HOME_IFS ip6 daddr $INTERNAL_NETS_V6 ct state { established, related } accept comment "public -> users"
    }

    chain fwd-from-internal {
        oifname @PUBLIC_IFS accept comment "internal -> public"
        oifname @BACKBONE_ACCESS_IFS ip daddr $INTERNAL_NETS_V4 accept comment "internal -> internal"
        oifname @BACKBONE_ACCESS_IFS ip6 daddr $INTERNAL_NETS_V6 accept comment "internal -> internal"
        oifname @BACKBONE_DN42_IFS ip daddr $DN42_NETS_V4 accept comment "internal -> dn42"
        oifname @BACKBONE_DN42_IFS ip6 daddr $DN42_NETS_V6 accept comment "internal -> dn42"
        oifname @USER_HOME_IFS ct state { established, related } accept comment "internal -> users"
        oifname @HOME_IFS ip daddr != {{ private_net_v4 }} ip daddr != $DN42_NETS_V4 accept comment "internal -> Internet through home network"
        oifname @HOME_IFS ip6 daddr != $DN42_NETS_V6 accept comment "internal -> Internet through home network"
    }

    chain fwd-from-dn42 {
        oifname @BACKBONE_ACCESS_IFS ip daddr $INTERNAL_NETS_V4 accept comment "dn42 -> internal"
        oifname @BACKBONE_ACCESS_IFS ip6 daddr $INTERNAL_NETS_V6 accept comment "dn42 -> internal"
        oifname @BACKBONE_DN42_IFS ip daddr $DN42_NETS_V4 accept comment "dn42 -> dn42"
        oifname @BACKBONE_DN42_IFS ip6 daddr $DN42_NETS_V6 accept comment "dn42 -> dn42"
        oifname @USER_HOME_IFS ct state { established, related } accept comment "dn42 -> users"
    }

    chain fwd-from-users {
        oifname @BACKBONE_ACCESS_IFS ip daddr $INTERNAL_NETS_V4 accept comment "users -> internal"
        oifname @BACKBONE_ACCESS_IFS ip6 daddr $INTERNAL_NETS_V6 accept comment "users -> internal"
        oifname @BACKBONE_DN42_IFS ip daddr $DN42_NETS_V4 accept comment "users -> dn42"
        oifname @BACKBONE_DN42_IFS ip6 daddr $DN42_NETS_V6 accept comment "users -> dn42"
    }

    chain output {
        type filter hook output priority -1; policy drop;

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow DNS lookups and HTTP(S) requests.
        udp sport 1024-65535 udp dport domain accept
        tcp sport 1024-65535 tcp dport domain accept
        tcp sport 1024-65535 tcp dport { http, https } accept

        # Allow outgoing DHCP and NTP.
        udp sport bootpc udp dport bootps accept
        udp dport ntp accept

        include "/etc/nftables/out.d/*.nft"
    }

    chain pings {
        limit rate 20/second accept
        counter drop
    }

    chain prerouting {
        type nat hook prerouting priority -101;
{% for dnat in public_port_forwards|default([]) %}
        iifname @PUBLIC_IFS {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } dnat ip to {{ dnat.dest_v4 }}
        iifname @PUBLIC_IFS {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } dnat ip6 to {{ dnat.dest_v6 }}
{% endfor %}
    }

    chain postrouting {
        type nat hook postrouting priority 99;
        oifname @PUBLIC_IFS masquerade
        oifname @HOME_IFS ip daddr != {{ private_net_v4 }} ip daddr != $DN42_NETS_V4 masquerade
        oifname @HOME_IFS ip6 daddr != $DN42_NETS_V6 masquerade
        ip daddr != {{ internal_net_v4 }} ip daddr $DN42_NETS_V4 ip saddr {{ private_net_v4 }} snat to {{ internal_ipv4 }}
    }
}

{% if not disable_bridge_fw|default(false) %}
# This table handles packets leaving or entering the ports on any bridge
# devices we create (so, basically, this allows us to firewall Docker
# containers).
table bridge firewall {
    # This is like an "output" chain from the standpoint of endpoints
    # (e.g. containers) attached to the bridge's ports.
    chain prerouting {
        type filter hook prerouting priority 0; policy drop;

        # We have to accept ARP or things won't work!
        ether type arp accept

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow DNS lookups and HTTP(S) requests.
        udp sport 1024-65535 udp dport domain accept
        tcp sport 1024-65535 tcp dport domain accept
        tcp sport 1024-65535 tcp dport { http, https } accept

        # Allow service advertisements through BGP.
        tcp dport bgp ip6 daddr {{ internal_ipv6 }} accept

        include "/etc/nftables/br-out.d/*.nft"
    }

    # This is like an "input" chain from the standpoint of endpoints
    # (e.g. containers) attached to the bridge's ports.
    chain postrouting {
        type filter hook postrouting priority 0; policy drop;

        # ... ARP as above ...
        ether type arp accept

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp icmp type echo-request jump pings
        meta l4proto ipv6-icmp icmpv6 type echo-request jump pings
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        include "/etc/nftables/br-in.d/*.nft"
    }

    chain pings {
        limit rate 20/second accept
        counter drop
    }
}
{% endif %}
