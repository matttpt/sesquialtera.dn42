{# This computes the complete list of backbone and access interfaces,
   including those automatically generated as part of the Wireguard mesh
   of backbone routers. #}
{% set computed_ifs = namespace(bb=[], ac=[]) %}
{% if manual_backbone_ifs is defined %}
  {%- set computed_ifs.bb = manual_backbone_ifs %}
{% endif %}
{% if access_ifs is defined %}
  {%- set computed_ifs.ac = access_ifs %}
{% endif %}
{% if inventory_hostname in groups.backbones %}
  {%- for host in groups.backbones
          if host != inventory_hostname
          and host not in wg_mesh_exclude|default([])
          and inventory_hostname not in hostvars[host].wg_mesh_exclude|default([])
          and site_group != hostvars[host].site_group
          and (wg_mesh_endpoint_address is defined
               or hostvars[host].wg_mesh_endpoint_address is defined) %}
    {%- set computed_ifs.bb = computed_ifs.bb + ["int-" + hostvars[host].inventory_hostname_short] %}
  {%- endfor %}
{% endif -%}

#!/usr/sbin/nft -f

flush ruleset

define DN42_NETS_V4 = { 172.20.0.0/14, 172.31.0.0/16, 10.0.0.0/8 }
define DN42_NETS_V6 = fd00::/8
define INTERNAL_NETS_V4 = { {{ internal_net_v4 }}, {{ private_net_v4 }} }
define INTERNAL_NETS_V6 = {{ internal_net_v6 }}
define DN42_AND_INTERNAL_NETS_V4 = { 172.20.0.0/14, 172.31.0.0/16, 10.0.0.0/8, {{ private_net_v4 }} }

table inet firewall {
    chain input {
        type filter hook input priority -1; policy drop;

        # Connection tracking.
        ct state { established, related } accept

        # Allow traffic on the loopback interface.
        iif lo accept

        # Allow ICMP and IGMP.
        ip protocol icmp icmp type echo-request jump pings
        meta l4proto ipv6-icmp icmpv6 type echo-request jump pings
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow SSH connections on any interface.
        tcp dport ssh accept

        # Allow access to the prometheus node exporter from internal
        # addresses.
        tcp dport 9100 ip saddr $INTERNAL_NETS_V4 accept
        tcp dport 9100 ip6 saddr $INTERNAL_NETS_V6 accept

        include "/etc/nftables/in.d/*.nft"
    }

    chain forward {
        type filter hook forward priority -1; policy drop;

        iifname vmap {
{% for if in computed_ifs.bb %}
            "{{ if }}" : goto fwd-from-backbone,
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}" : goto fwd-from-access,
{% endfor %}
{% for if in dn42_ifs|default([]) %}
            "{{ if }}" : goto fwd-from-dn42,
{% endfor %}
{% for if in protected_ifs|default([]) %}
            "{{ if.name }}" : goto fwd-from-access,
{% endfor %}
{% for if in public_ifs|default([]) %}
            "{{ if }}" : goto fwd-from-public,
{% endfor %}
        }
    }

    chain fwd-from-backbone {
        oifname vmap {
{% for if in computed_ifs.bb %}
            "{{ if }}" : accept,
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}" : goto fwd-backbone-to-access,
{% endfor %}
{% for if in protected_ifs|default([]) %}
            "{{ if.name }}" : goto fwd-backbone-to-protected-{{ if.name }},
{% endfor %}
{% for if in dn42_ifs|default([]) %}
            "{{ if }}" : goto fwd-backbone-to-dn42,
{% endfor %}
{% for if in public_ifs|default([]) %}
            "{{ if }}" : goto fwd-internal-to-public,
{% endfor %}
        }
    }

    chain fwd-backbone-to-access {
        ip daddr $INTERNAL_NETS_V4 accept
        ip6 daddr $INTERNAL_NETS_V6 accept
    }

{% for if in protected_ifs|default([]) %}
    chain fwd-backbone-to-protected-{{ if.name }} {
        ip daddr != $INTERNAL_NETS_V4 reject
        ip6 daddr != $INTERNAL_NETS_V6 reject
        ct state { established, related } accept
{% if if.allowed_nets|default([])|ipv4 %}
        ip saddr { {{ if.allowed_nets|ipv4|join(', ') }} } accept
{% endif %}
{% if if.allowed_nets|default([])|ipv6 %}
        ip6 saddr { {{ if.allowed_nets|ipv6|join(', ') }} } accept
{% endif %}
    }

{% endfor %}
    chain fwd-backbone-to-dn42 {
        ip saddr $DN42_AND_INTERNAL_NETS_V4 ip daddr $DN42_NETS_V4 ip daddr != {{ internal_net_v4 }} accept
        ip6 saddr $DN42_NETS_V6 ip6 daddr $DN42_NETS_V6 ip6 daddr != $INTERNAL_NETS_V6 accept
    }

    chain fwd-internal-to-public {
        ip saddr $INTERNAL_NETS_V4 ip daddr != $DN42_AND_INTERNAL_NETS_V4 accept
        ip6 saddr $INTERNAL_NETS_V6 ip6 daddr != $DN42_NETS_V6 accept
    }

    chain fwd-from-access {
        oifname vmap {
{% for if in computed_ifs.bb %}
            "{{ if }}" : goto fwd-access-to-backbone,
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}" : goto fwd-access-to-access,
{% endfor %}
{% for if in protected_ifs|default([]) %}
            "{{ if.name }}" : goto fwd-access-to-protected-{{ if.name }},
{% endfor %}
{% for if in dn42_ifs|default([]) %}
            "{{ if }}" : goto fwd-access-to-dn42,
{% endfor %}
{% for if in public_ifs|default([]) %}
            "{{ if }}" : goto fwd-internal-to-public,
{% endfor %}
        }
    }

    chain fwd-access-to-backbone {
        ip saddr $INTERNAL_NETS_V4 accept
        ip6 saddr $INTERNAL_NETS_V6 accept
    }

    chain fwd-access-to-access {
        ip saddr $INTERNAL_NETS_V4 ip daddr $INTERNAL_NETS_V4 accept
        ip6 saddr $INTERNAL_NETS_V6 ip6 daddr $INTERNAL_NETS_V6 accept
    }

{% for if in protected_ifs|default([]) %}
    chain fwd-access-to-protected-{{ if.name }} {
{% if if.work_around_bridge_calling_iptables|default(false) %}
        iifname "{{ if.name }}" accept comment "Work-around for bridge calling iptables"
{% endif %}
        ip daddr != $INTERNAL_NETS_V4 reject
        ip6 daddr != $INTERNAL_NETS_V6 reject
        ip saddr != $INTERNAL_NETS_V4 reject
        ip6 saddr != $INTERNAL_NETS_V6 reject
        ct state { established, related } accept
{% if if.allowed_nets|default([])|ipv4 %}
        ip saddr { {{ if.allowed_nets|ipv4|join(', ') }} } accept
{% endif %}
{% if if.allowed_nets|default([])|ipv6 %}
        ip6 saddr { {{ if.allowed_nets|ipv6|join(', ') }} } accept
{% endif %}
    }

{% endfor %}
    chain fwd-access-to-dn42 {
        ip saddr $INTERNAL_NETS_V4 ip daddr $DN42_NETS_V4 ip daddr != {{ internal_net_v4 }} accept
        ip6 saddr $INTERNAL_NETS_V6 ip6 daddr $DN42_NETS_V6 ip6 daddr != $INTERNAL_NETS_V6 accept
    }

    chain fwd-from-dn42 {
        oifname vmap {
{% for if in computed_ifs.bb %}
            "{{ if }}" : goto fwd-dn42-to-backbone,
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}" : goto fwd-dn42-to-access,
{% endfor %}
{% for if in protected_ifs|default([]) %}
            "{{ if.name }}" : goto fwd-dn42-to-protected,
{% endfor %}
{% for if in dn42_ifs|default([]) %}
            "{{ if }}" : goto fwd-dn42-to-dn42,
{% endfor %}
        }
    }

    chain fwd-dn42-to-backbone {
        ip saddr $DN42_NETS_V4 ip saddr != {{ internal_net_v4 }} ip daddr $DN42_AND_INTERNAL_NETS_V4 accept
        ip6 saddr $DN42_NETS_V6 ip6 saddr != $INTERNAL_NETS_V6 ip6 daddr $DN42_NETS_V6 accept
    }

    chain fwd-dn42-to-access {
        ip saddr $DN42_NETS_V4 ip saddr != {{ internal_net_v4 }} ip daddr $INTERNAL_NETS_V4 accept
        ip6 saddr $DN42_NETS_V6 ip6 saddr != $INTERNAL_NETS_V6 ip6 daddr $INTERNAL_NETS_V6 accept
    }

    chain fwd-dn42-to-protected {
        ip saddr $DN42_NETS_V4 ip saddr != {{ internal_ipv4 }} ip daddr $INTERNAL_NETS_V4 ct state { established, related } accept
        ip6 saddr $DN42_NETS_V6 ip6 saddr != $INTERNAL_NETS_V6 ip6 daddr $INTERNAL_NETS_V6 ct state { established, related } accept
    }

    chain fwd-dn42-to-dn42 {
        ip saddr $DN42_NETS_V4 ip saddr != {{ internal_net_v4 }} ip daddr $DN42_NETS_V4 ip daddr != {{ internal_net_v4 }} accept
        ip6 saddr $DN42_NETS_V6 ip6 saddr != $INTERNAL_NETS_V6 ip6 daddr $DN42_NETS_V6 ip6 daddr != $INTERNAL_NETS_V6 accept
    }

    chain fwd-from-public {
{% for dnat in public_port_forwards|default([]) %}
        ip daddr {{ dnat.dest_v4 }} {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } accept
        ip6 daddr {{ dnat.dest_v6 }} {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } accept
{% endfor %}
        oifname vmap {
{% for if in computed_ifs.bb %}
            "{{ if }}" : goto fwd-public-to-internal,
{% endfor %}
{% for if in computed_ifs.ac %}
            "{{ if }}" : goto fwd-public-to-internal,
{% endfor %}
{% for if in protected_ifs|default([]) %}
            "{{ if.name }}" : goto fwd-public-to-internal,
{% endfor %}
        }
    }

    chain fwd-public-to-internal {
        ip daddr $INTERNAL_NETS_V4 ct state { established, related } accept
        ip6 daddr $INTERNAL_NETS_V6 ct state { established, related } accept
    }

    chain output {
        type filter hook output priority -1; policy drop;

        # Connection tracking.
        ct state { established, related } accept

        # Allow traffic on the loopback interface.
        oif lo accept

        # Allow ICMP and IGMP.
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow DNS lookups and HTTP(S) requests.
        udp sport 1024-65535 udp dport domain accept
        tcp sport 1024-65535 tcp dport domain accept
        tcp sport 1024-65535 tcp dport { http, https } accept

        # Allow outgoing DHCP and NTP.
        udp sport bootpc udp dport bootps accept
        udp dport ntp accept

        include "/etc/nftables/out.d/*.nft"
    }

    chain pings {
        limit rate 20/second accept
        counter drop
    }

    chain prerouting {
        type nat hook prerouting priority -101;
{% for dnat in public_port_forwards|default([]) %}
        iifname { {{ public_ifs|join(',') }} } {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } dnat ip to {{ dnat.dest_v4 }}
        iifname { {{ public_ifs|join(',') }} } {{ dnat.proto }} dport { {{ dnat.ports|join(', ') }} } dnat ip6 to {{ dnat.dest_v6 }}
{% endfor %}
    }

    chain postrouting {
        type nat hook postrouting priority 99;
{% if public_ifs is defined and public_ifs != [] %}
        oifname { {{ public_ifs|join(',') }} } masquerade
{% endif %}
{% if internal_ipv4|ipaddr(internal_net_v4) %}
        ip saddr {{ private_net_v4 }} ip daddr != {{ internal_net_v4 }} ip daddr $DN42_NETS_V4 snat to {{ internal_ipv4 }}
{% endif %}
    }
}

{% if not disable_bridge_fw|default(false) %}
# This table handles packets leaving or entering the ports on any bridge
# devices we create (so, basically, this allows us to firewall Docker
# containers).
table bridge firewall {
    # This is like an "output" chain from the standpoint of endpoints
    # (e.g. containers) attached to the bridge's ports.
    chain prerouting {
        type filter hook prerouting priority 0; policy drop;

        # We have to accept ARP or things won't work!
        ether type arp accept

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        # Allow DNS lookups and HTTP(S) requests.
        udp sport 1024-65535 udp dport domain accept
        tcp sport 1024-65535 tcp dport domain accept
        tcp sport 1024-65535 tcp dport { http, https } accept

        # Allow service advertisements through BGP.
        tcp dport bgp ip6 daddr {{ internal_ipv6 }} accept

        include "/etc/nftables/br-out.d/*.nft"
    }

    # This is like an "input" chain from the standpoint of endpoints
    # (e.g. containers) attached to the bridge's ports.
    chain postrouting {
        type filter hook postrouting priority 0; policy drop;

        # ... ARP as above ...
        ether type arp accept

        # Connection tracking.
        ct state { established, related } accept

        # Allow ICMP and IGMP.
        ip protocol icmp icmp type echo-request jump pings
        meta l4proto ipv6-icmp icmpv6 type echo-request jump pings
        ip protocol icmp accept
        meta l4proto ipv6-icmp accept
        ip protocol igmp accept

        include "/etc/nftables/br-in.d/*.nft"
    }

    chain pings {
        limit rate 20/second accept
        counter drop
    }
}
{% endif %}
